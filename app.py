import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import plotly.express as px
import os
import sys
import re
from typing import Dict, List, Tuple, Any, Optional

# Adicionar diret√≥rios ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Importar m√≥dulos personalizados
from utils.text_extractor import FootballStatsExtractor
from utils.data_processor import FootballDataProcessor
from utils.visualizer import FootballVisualizer
from analyzers.head_to_head import HeadToHeadAnalyzer
from analyzers.recent_form import RecentFormAnalyzer
from analyzers.table_positions import TablePositionsAnalyzer
from analyzers.text_predictions import TextPredictionsAnalyzer
from analyzers.prediction_models import FootballPredictionModels

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="An√°lise Estat√≠stica de Futebol",
    page_icon="‚öΩ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fun√ß√£o para processar o texto de entrada e extrair dados
def process_input_text(text: str) -> Dict[str, Any]:
    # Extrair dados do texto
    extractor = FootballStatsExtractor(text)
    extracted_data = extractor.extract_all_data()
    
    # Processar os dados extra√≠dos
    processor = FootballDataProcessor(extracted_data)
    processed_data = processor.process_all_data()
    
    return processed_data

# Fun√ß√£o para analisar os dados processados
def analyze_data(processed_data: Dict[str, Any]) -> Dict[str, Any]:
    # Analisar confrontos diretos
    h2h_analyzer = HeadToHeadAnalyzer(processed_data)
    h2h_analysis = h2h_analyzer.run_complete_analysis()
    
    # Analisar forma recente
    form_analyzer = RecentFormAnalyzer(processed_data)
    form_analysis = form_analyzer.run_complete_analysis()
    
    # Analisar posi√ß√µes nas tabelas
    table_analyzer = TablePositionsAnalyzer(processed_data)
    table_analysis = table_analyzer.run_complete_analysis()
    
    # Analisar textos e progn√≥sticos
    text_analyzer = TextPredictionsAnalyzer(processed_data)
    text_analysis = text_analyzer.run_complete_analysis()
    
    # Executar modelos matem√°ticos
    models = FootballPredictionModels(processed_data)
    models_analysis = models.run_complete_analysis()
    
    return {
        "head_to_head": h2h_analysis,
        "recent_form": form_analysis,
        "table_positions": table_analysis,
        "text_predictions": text_analysis,
        "prediction_models": models_analysis
    }

# Fun√ß√£o para criar visualiza√ß√µes
def create_visualizations(processed_data: Dict[str, Any]) -> Dict[str, Any]:
    visualizer = FootballVisualizer(processed_data)
    all_visualizations = visualizer.create_all_visualizations()
    # N√£o salvamos mais as visualiza√ß√µes como arquivos
    # Apenas retornamos os objetos de visualiza√ß√£o diretamente
    return all_visualizations

# Fun√ß√£o para exibir insights
def display_insights(analysis: Dict[str, Any], visualizations: Dict[str, Any]):
    home_team = analysis.get("head_to_head", {}).get("historical_dominance", {}).get("home_team", "Mandante")
    away_team = analysis.get("head_to_head", {}).get("historical_dominance", {}).get("away_team", "Visitante")
    
    st.header(f"üìä An√°lise: {home_team} vs {away_team}")
    
    # Criar abas para diferentes tipos de an√°lise
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "Confrontos Diretos", 
        "Forma Recente", 
        "Posi√ß√µes nas Tabelas", 
        "Textos e Progn√≥sticos",
        "Modelos Matem√°ticos"
    ])
    
    # Aba de Confrontos Diretos
    with tab1:
        h2h_insights = analysis.get("head_to_head", {}).get("insights", [])
        if h2h_insights:
            st.subheader("Insights dos Confrontos Diretos")
            for insight in h2h_insights:
                st.write(f"‚Ä¢ {insight}")
            
            # Exibir visualiza√ß√µes de confrontos diretos
            st.subheader("Visualiza√ß√µes")
            h2h_viz = visualizations.get("head_to_head", {})
            
            col1, col2 = st.columns(2)
            
            with col1:
                if "results_distribution" in h2h_viz:
                    st.plotly_chart(h2h_viz["results_distribution"], use_container_width=True)
            
            with col2:
                if "last_matches" in h2h_viz:
                    st.plotly_chart(h2h_viz["last_matches"], use_container_width=True)
            
            if "goals_stats" in h2h_viz:
                st.plotly_chart(h2h_viz["goals_stats"], use_container_width=True)
        else:
            st.warning("N√£o foi poss√≠vel gerar insights para os confrontos diretos.")
    
    # Aba de Forma Recente
    with tab2:
        form_insights = analysis.get("recent_form", {}).get("insights", [])
        if form_insights:
            st.subheader("Insights da Forma Recente")
            for insight in form_insights:
                st.write(f"‚Ä¢ {insight}")
            
            # Exibir visualiza√ß√µes de forma recente
            st.subheader("Visualiza√ß√µes")
            form_viz = visualizations.get("team_form", {})
            
            col1, col2 = st.columns(2)
            
            with col1:
                if home_team in form_viz and "results_distribution" in form_viz[home_team]:
                    st.plotly_chart(form_viz[home_team]["results_distribution"], use_container_width=True)
                    st.caption(f"Distribui√ß√£o de resultados: {home_team}")
            
            with col2:
                if away_team in form_viz and "results_distribution" in form_viz[away_team]:
                    st.plotly_chart(form_viz[away_team]["results_distribution"], use_container_width=True)
                    st.caption(f"Distribui√ß√£o de resultados: {away_team}")
            
            col3, col4 = st.columns(2)
            
            with col3:
                if home_team in form_viz and "goals" in form_viz[home_team]:
                    st.plotly_chart(form_viz[home_team]["goals"], use_container_width=True)
                    st.caption(f"Gols nos √∫ltimos jogos: {home_team}")
            
            with col4:
                if away_team in form_viz and "goals" in form_viz[away_team]:
                    st.plotly_chart(form_viz[away_team]["goals"], use_container_width=True)
                    st.caption(f"Gols nos √∫ltimos jogos: {away_team}")
        else:
            st.warning("N√£o foi poss√≠vel gerar insights para a forma recente.")
    
    # Aba de Posi√ß√µes nas Tabelas
    with tab3:
        table_insights = analysis.get("table_positions", {}).get("insights", [])
        if table_insights:
            st.subheader("Insights das Posi√ß√µes nas Tabelas")
            for insight in table_insights:
                st.write(f"‚Ä¢ {insight}")
            
            # Exibir visualiza√ß√µes de posi√ß√µes nas tabelas
            st.subheader("Visualiza√ß√µes")
            table_viz = visualizations.get("table_positions", {})
            
            col1, col2 = st.columns(2)
            
            with col1:
                if "general_positions" in table_viz:
                    st.plotly_chart(table_viz["general_positions"], use_container_width=True)
            
            with col2:
                if "specific_positions" in table_viz:
                    st.plotly_chart(table_viz["specific_positions"], use_container_width=True)
            
            if "direct_comparison" in table_viz:
                st.plotly_chart(table_viz["direct_comparison"], use_container_width=True)
        else:
            st.warning("N√£o foi poss√≠vel gerar insights para as posi√ß√µes nas tabelas.")
    
    # Aba de Textos e Progn√≥sticos
    with tab4:
        text_insights = analysis.get("text_predictions", {}).get("insights", [])
        if text_insights:
            st.subheader("Insights dos Textos e Progn√≥sticos")
            for insight in text_insights:
                st.write(f"‚Ä¢ {insight}")
            
            # Exibir an√°lise textual completa
            gpt_analysis = analysis.get("text_predictions", {}).get("gpt_analysis", {}).get("gpt_analysis", "")
            if gpt_analysis:
                with st.expander("Ver an√°lise textual completa"):
                    st.write(gpt_analysis)
            
            # Exibir visualiza√ß√µes de progn√≥sticos
            st.subheader("Visualiza√ß√µes")
            pred_viz = visualizations.get("predictions", {})
            
            col1, col2 = st.columns(2)
            
            with col1:
                if "general_predictions" in pred_viz:
                    st.plotly_chart(pred_viz["general_predictions"], use_container_width=True)
            
            with col2:
                if "goals_detailed" in pred_viz:
                    st.plotly_chart(pred_viz["goals_detailed"], use_container_width=True)
            
            col3, col4 = st.columns(2)
            
            with col3:
                if "corners" in pred_viz:
                    st.plotly_chart(pred_viz["corners"], use_container_width=True)
            
            with col4:
                if "first_goal" in pred_viz:
                    st.plotly_chart(pred_viz["first_goal"], use_container_width=True)
        else:
            st.warning("N√£o foi poss√≠vel gerar insights para os textos e progn√≥sticos.")
    
    # Aba de Modelos Matem√°ticos
    with tab5:
        models_insights = analysis.get("prediction_models", {}).get("insights", [])
        if models_insights:
            st.subheader("Insights dos Modelos Matem√°ticos")
            for insight in models_insights:
                st.write(f"‚Ä¢ {insight}")
            
            # Exibir resultados detalhados dos modelos
            ensemble_results = analysis.get("prediction_models", {}).get("ensemble_results", {})
            if ensemble_results:
                # Criar gr√°fico de probabilidades de resultados
                result_labels = [f'{home_team} Vit√≥ria', 'Empate', f'{away_team} Vit√≥ria']
                result_values = [
                    ensemble_results.get("home_win_prob", 0),
                    ensemble_results.get("draw_prob", 0),
                    ensemble_results.get("away_win_prob", 0)
                ]
                
                fig_results = go.Figure(data=[go.Pie(
                    labels=result_labels,
                    values=result_values,
                    hole=.3,
                    marker_colors=['red', 'gray', 'blue']
                )])
                
                fig_results.update_layout(
                    title_text='Probabilidades de Resultados (Modelo Ensemble)',
                    annotations=[dict(text='Probabilidades', x=0.5, y=0.5, font_size=15, showarrow=False)]
                )
                
                st.plotly_chart(fig_results)
                
                # Criar gr√°fico de probabilidades de over/under
                over_under_labels = ['Over 0.5', 'Over 1.5', 'Over 2.5', 'Over 3.5']
                over_under_values = [
                    ensemble_results.get("over_0_5_prob", 0),
                    ensemble_results.get("over_1_5_prob", 0),
                    ensemble_results.get("over_2_5_prob", 0),
                    ensemble_results.get("over_3_5_prob", 0)
                ]
                
                fig_over_under = go.Figure([go.Bar(
                    x=over_under_labels,
                    y=over_under_values,
                    marker_color=['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']
                )])
                
                fig_over_under.update_layout(
                    title_text='Probabilidades de Over/Under',
                    xaxis_title='Mercado',
                    yaxis_title='Probabilidade (%)',
                    yaxis=dict(range=[0, 100])
                )
                
                st.plotly_chart(fig_over_under)
                
                # Criar gr√°fico de probabilidade de BTTS
                btts_prob = ensemble_results.get("btts_prob", 0)
                no_btts_prob = 100 - btts_prob
                
                fig_btts = go.Figure(data=[go.Pie(
                    labels=['Ambas Marcam', 'Nem Todas Marcam'],
                    values=[btts_prob, no_btts_prob],
                    hole=.3,
                    marker_colors=['green', 'red']
                )])
                
                fig_btts.update_layout(
                    title_text='Probabilidade de Ambas Equipes Marcarem (BTTS)',
                    annotations=[dict(text=f'{btts_prob:.1f}%', x=0.5, y=0.5, font_size=15, showarrow=False)]
                )
                
                st.plotly_chart(fig_btts)
                
                # Exibir placares mais prov√°veis
                top_5_scores = ensemble_results.get("top_5_scores", [])
                if top_5_scores:
                    st.subheader("Placares Mais Prov√°veis")
                    
                    scores = [score.get("score", "") for score in top_5_scores]
                    probabilities = [score.get("probability", 0) for score in top_5_scores]
                    
                    fig_scores = go.Figure([go.Bar(
                        x=scores,
                        y=probabilities,
                        marker_color='purple'
                    )])
                    
                    fig_scores.update_layout(
                        title_text='Top 5 Placares Mais Prov√°veis',
                        xaxis_title='Placar',
                        yaxis_title='Probabilidade (%)',
                        yaxis=dict(range=[0, max(probabilities) * 1.2])
                    )
                    
                    st.plotly_chart(fig_scores)
        else:
            st.warning("N√£o foi poss√≠vel gerar insights para os modelos matem√°ticos.")

# Fun√ß√£o principal
def main():
    st.title("üìä An√°lise Estat√≠stica de Futebol")
    
    st.write("""
    Esta aplica√ß√£o analisa estat√≠sticas de futebol e gera insights detalhados para ajudar na an√°lise de jogos.
    Cole o texto com as estat√≠sticas do jogo no formato adequado e obtenha uma an√°lise completa.
    """)
    
    # √Årea para entrada de texto
    text_input = st.text_area(
        "Cole o texto com as estat√≠sticas do jogo aqui:",
        height=300,
        placeholder="Cole aqui o texto com estat√≠sticas no formato adequado..."
    )
    
    # Bot√£o para processar o texto
    if st.button("Analisar Estat√≠sticas"):
        if not text_input:
            st.error("Por favor, insira o texto com as estat√≠sticas do jogo.")
        else:
            # Mostrar spinner durante o processamento
            with st.spinner("Processando estat√≠sticas..."):
                try:
                    # Processar o texto
                    processed_data = process_input_text(text_input)
                    
                    # Analisar os dados
                    analysis = analyze_data(processed_data)
                    
                    # Criar visualiza√ß√µes
                    visualizations = create_visualizations(processed_data)
                    
                    # Exibir insights e visualiza√ß√µes
                    display_insights(analysis, visualizations)
                    
                    # Adicionar se√ß√£o de conclus√£o
                    st.header("üéØ Conclus√£o")
                    
                    # Extrair insights principais de cada an√°lise
                    h2h_insights = analysis.get("head_to_head", {}).get("insights", [])
                    form_insights = analysis.get("recent_form", {}).get("insights", [])
                    table_insights = analysis.get("table_positions", {}).get("insights", [])
                    text_insights = analysis.get("text_predictions", {}).get("insights", [])
                    models_insights = analysis.get("prediction_models", {}).get("insights", [])
                    
                    # Selecionar insights mais relevantes para a conclus√£o
                    key_insights = []
                    
                    # Adicionar insight sobre o favorito dos modelos matem√°ticos
                    for insight in models_insights:
                        if "Resultado mais prov√°vel" in insight:
                            key_insights.append(insight)
                            break
                    
                    # Adicionar insight sobre o placar mais prov√°vel
                    for insight in models_insights:
                        if "Placar mais prov√°vel" in insight:
                            key_insights.append(insight)
                            break
                    
                    # Adicionar insight sobre over/under
                    for insight in models_insights:
                        if "Over 2.5 gols" in insight:
                            key_insights.append(insight)
                            break
                    
                    # Adicionar insight sobre BTTS
                    for insight in models_insights:
                        if "ambas equipes marcarem" in insight:
                            key_insights.append(insight)
                            break
                    
                    # Adicionar insight sobre confrontos diretos
                    for insight in h2h_insights:
                        if "domin√¢ncia" in insight or "Hist√≥rico" in insight:
                            key_insights.append(insight)
                            break
                    
                    # Adicionar insight sobre forma recente
                    for insight in form_insights:
                        if "favorito" in insight or "momento" in insight:
                            key_insights.append(insight)
                            break
                    
                    # Exibir insights chave
                    for insight in key_insights:
                        st.write(f"‚Ä¢ {insight}")
                    
                    # Adicionar nota final
                    st.info("""
                    **Nota:** Esta an√°lise √© baseada em dados hist√≥ricos e modelos estat√≠sticos. 
                    Os resultados reais podem variar devido a fatores imprevis√≠veis como les√µes, 
                    condi√ß√µes clim√°ticas, decis√µes de arbitragem, entre outros.
                    """)
                except Exception as e:
                    st.error(f"Ocorreu um erro ao processar o texto: {str(e)}")
                    st.info("Verifique se o formato do texto est√° correto e tente novamente.")

if __name__ == "__main__":
    main()
